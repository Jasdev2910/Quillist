// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma

// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
   id       String   @id @default(uuid())
  email    String   @unique
  name     String?
  password String
  posts    Post[]
  likes    Like[]
  reads    Read[]
  comments Comment[]
}

// schema.prisma

model Post {
  id           String   @id @default(uuid())
  title        String
  content      String   // Existing content field
  contentNew   Json?    // New column with desired type
  published    Boolean  @default(false)
  publishedAt  DateTime @default(now())
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  likes       Like[]
  reads       Read[]
  comments    Comment[]
  images      Image[]  // Added opposite relation field for Image
   tags        PostTag[]
  categories  PostCategory[]
}

model Like {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Read {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Comment {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  text      String
  createdAt DateTime @default(now()) // Store the date when the comment was created
}

// New models with opposite relation fields

model Tag {
  id    String   @id @default(uuid())
  name  String   @unique
  posts PostTag[]
}

model Category {
  id    String   @id @default(uuid())
  name  String   @unique
  posts PostCategory[]
}

model Image {
  id       String   @id @default(uuid())
  url      String
  altText  String?
  post     Post     @relation(fields: [postId], references: [id])
  postId   String
}

// Join tables for many-to-many relationships
model PostTag {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id])
  postId String
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String
  @@unique([postId, tagId])
}

model PostCategory {
  id        String   @id @default(uuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String
  @@unique([postId, categoryId])
}